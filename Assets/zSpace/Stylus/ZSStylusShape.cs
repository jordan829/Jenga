////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) 2007-2013 zSpace, Inc.  All Rights Reserved.
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using System;

/// <summary>
/// Class for maintaining the shape of a stylus tool.
/// While ZSStylusSelector interfaces the stylus with the scene, ZSStylusShape can make the stylus itself dynamic.
/// The stylus can be made to change shape, color, or behavior here based on overlaps generated by ZSStylusSelector.
/// </summary>
public abstract class ZSStylusShape : ZSUMonoBehavior
{
  /// <summary>
  /// The default color of objects in the _colorCodedObjects list.
  /// </summary>
  public Color _defaultColor = Color.white;

  /// <summary>
  /// When the stylus overlaps with objects in the scene, this color will be applied to all objects in the _colorCodedObjects list.
  /// </summary>
  public Color _hoveredColor = Color.green;

  /// <summary>
  /// The list of objects whose color will change based on overlap between the stylus and objects in the scene.
  /// </summary>
  public GameObject[] _colorCodedObjects;
	
  /// <summary>
  /// Convenience function for getting the tool that uses this shape.
  /// </summary>
  public ZSStylusTool Tool { get; protected set; }

  /// <summary>
  /// The current color of all objects in the _colorCodedObjects list.
  /// </summary>
  public virtual Color color
  {
    set
    {
      if (_colorCodedObjects != null)
      {
        foreach (GameObject go in _colorCodedObjects)
          go.GetComponent<Renderer>().material.color = value;
      }
      _color = value;
    }
    get { return _color; }
  }

  /// <summary>
  /// The "epicenter" of the stylus.  Defined in world space.
  /// If multiple objects collide with the stylus, the one closest to this point will be preferred in hovering and selection.
  /// This also determines the length of the raycast.
  /// If _hotspot is at (0, 0, 0), the ray will be infinite, in +Z direction.
  /// </summary>
  public virtual Vector3 hotSpot { get { return transform.TransformPoint(Vector3.zero); } }

  protected Color _color;
  protected bool _isHovering = false;

  /// <summary>
  /// This callback will be called whenever the stylus begins intersecting with an object.
  /// </summary>
  public virtual void OnHoverBegin(GameObject gameObject, Vector3 point) { _isHovering = true; }

  /// <summary>
  /// This callback will be called after each frame during which the stylus is intersecting with an object.
  /// </summary>
  public virtual void OnHoverStay(GameObject gameObject, Vector3 point) {}

  /// <summary>
  /// This callback will be called whenever the stylus finishes intersecting with an object.
  /// </summary>
  public virtual void OnHoverEnd(GameObject gameObject) { _isHovering = false; }

  /// <summary>
  /// This callback will be called whenever the stylus selects an object.
  /// </summary>
  public virtual void OnSelected(GameObject gameObject, Vector3 point) {}

  /// <summary>
  /// This callback will be called whenever the stylus de-selects an object.
  /// </summary>
  public virtual void OnDeselected(GameObject gameObject) {}

  protected override void OnScriptAwake()
  {
    Tool = GetComponent<ZSStylusTool>();
  }

  protected override void OnScriptUpdate()
  {
    base.OnScriptUpdate();

    color = (_isHovering) ? _hoveredColor : _defaultColor;
  }
}
